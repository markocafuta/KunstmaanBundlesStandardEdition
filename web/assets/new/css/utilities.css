/**
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */

.u-align-baseline { vertical-align: baseline !important; }
.u-align-bottom { vertical-align: bottom !important; }
.u-align-middle { vertical-align: middle !important; }
.u-align-top { vertical-align: top !important; }

/**
 * Display-type utilities
 */

.u-inline { display: inline !important; }
.u-block { display: block !important; }
.u-hidden { display: none !important; }

/**
 * Completely remove from the flow but leave available to screen readers.
 */

.u-hidden-visually {
    position: absolute !important; overflow: hidden !important;
    width: 1px !important; height: 1px !important; padding: 0 !important;
    border: 0 !important; clip: rect(1px, 1px, 1px, 1px) !important;
}

[data-toggle-class],
[data-toggle="modal"] { cursor: pointer; }
.u-togglable { max-height: 0; overflow: hidden; transition: max-height 0.5s ease; }
    .u-togglable.is-open { max-height: 100em; }


/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */

.u-inline-block { display: inline-block !important; /* 1 */ max-width: 100%; }
.u-table { display: table !important; }
.u-table-cell { display: table-cell !important; }
.u-table-row { display: table-row !important; }

/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.u-cf:before,
.u-cf:after { /* 1 */ content: " "; /* 2 */ display: table; }
.u-cf:after { clear: both; }

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */

.u-nbfc { overflow: hidden !important; }

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */

.u-nbfc-alt { /* 1 */ display: table-cell !important; /* 2 */ width: 10000px !important; }

/**
 * Floats
 */

.u-clear { clear: both !important; }
.u-float-left { float: left !important; }
.u-float-right { float: right !important; }


/**
 * Pins to all corners by default. But when a width and/or height are
 * provided, the element will be centered in its nearest relatively-positioned
 * ancestor.
 */

.u-pos-absolute-center { bottom: 0 !important; left: 0 !important; margin: auto !important; position: absolute !important; right: 0 !important; top: 0 !important; }

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */

.u-pos-fixed { position: fixed !important; -webkit-backface-visibility: hidden; /* 1 */ backface-visibility: hidden; }
.u-pos-relative { position: relative !important; }
.u-pos-static { position: static !important; }


/**
 * Word breaking
 *
 * Break strings when their length exceeds the width of their container.
 */

.u-text-break { word-wrap: break-word !important; }

/**
 * Horizontal text alignment
 */

.u-center { margin-left: auto; margin-right: auto; }
.u-text-center { text-align: center !important; }
.u-text-left { text-align: left !important; }
.u-text-right { text-align: right !important; }

/**
 * Inherit the ancestor's text color.
 */

.u-text-inherit-color { color: inherit !important; }

/**
 * Enables font kerning in all browsers.
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 *
 * 1. Chrome (not Windows), Firefox, Safari 6+, iOS, Android
 * 2. Chrome (not Windows), Firefox, IE 10+
 * 3. Safari 7 and future browsers
 */

.u-text-kern {
    text-rendering: optimizeLegibility;
    /* 1 */
    -webkit-font-feature-settings: "kern" 1;
    -moz-font-feature-settings: "kern" 1;
    font-feature-settings: "kern" 1;
    /* 2 */
    -webkit-font-kerning: normal;
    -moz-font-kerning: normal;
    font-kerning: normal;
    /* 3 */
}

/**
 * Prevent whitespace wrapping
 */

.u-text-no-wrap { white-space: nowrap !important; }

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
 *    nodes.
 */

.u-text-truncate {
    max-width: 100%;
    /* 1 */
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
    word-wrap: normal !important;
    /* 2 */
}


/**
 * Image replacement (Kellum)
 */

.u-ir { text-indent: 100%; white-space: nowrap; overflow: hidden; }

.u-no-scroll { overflow-y: hidden; }



